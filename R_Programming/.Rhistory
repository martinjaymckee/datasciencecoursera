install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
setwd("~/Workspace/R_Workspace/Coursera/datasciencecoursera/R_Programming")
source("./ProgrammingAssignment2/cachematrix.R")
z <- matrix(rnorm(100), 10, 10)
solve(z)
makeCacheMatrix(z)
m <- makeCacheMatrix(z)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
z <- matrix(rnorm(400), 20, 20)
m$set(z)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
z <- matrix(rnorm(2500), 50, 50)
m$set(z)
system.time(cacheSolve(m))
system.time(cacheSolve(m))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
m <- makeCacheMatrix()
m$set(matrix(1:9, 3, 3))
m$get()
makeCacheMatrix
str(m)
summary(m)
summary(c("a", "v", "r"))
str(c("a", "v", "r"))
summary(1:100)
str(1:100)
runif(10)
runif(10, 0, 10)
?mapply
mapply(function(a,b) a+b, 1:4, 4:1)
mapply(complex, rnorm(5), rnorm(5))
?complex
mapply(function(i, j)complex(real=i, imaginary=j), rnorm(5), rnorm(5))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
source("week3-lexicalscoping-cache-example.R")
v <- makeVector(1:10)
cachemean(v)
cachemean(v)
source("week3-lexicalscoping-cache-example.R")
cachemean(v)
cachemean(v)
v <- makeVector(1:10)
cachemean(v)
cachemean(v)
c<-mapply(function(i, j)complex(real=i, imaginary=j), rnorm(50), rnorm(50))
str(c)
summary(c)
sapply(c, Mod)
summary(sapply(c, Mod))
c<-mapply(function(i, j)complex(real=i, imaginary=j), rnorm(500), rnorm(500))
summary(sapply(c, Mod))
gl(4)
gl(4,1)
l<-gl(4,1)
str(l)
class(l)
summary(l)
m <- matrix(rnorm(100), 10, 10)
m
str(m)
summary(m)
library(datasets)
airquality
aq <- split(airquality, airquality$Month)
aq
str(aq)
summary(aq)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100)
y <- 0.5 + 2 * x + e
summary(y)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(10)
x <- rbinom(100)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x, y)
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {}
hilbert <- function(n) {i <- 1:n; 1/outer(i-1, i, "+")}
x <- hibert(1000)
x <- hilbert(1000)
x
system.time(svd(x))
?svd
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plans)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
plants[plants$Active_Growth_Period == "Year Round"]
plants[plants$Active_Growth_Period == "Year Round",]
plants$Active_Growth_Period
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replacement=T, prob=c(.3,.7))
sample(c(0,1), 100, replace=T, prob=c(.3,.7))
flips <- sample(c(0,1), 100, replace=T, prob=c(.3,.7))
flips <- sample(c(0,1), 100, replace=T, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
getwd()
mkdir("Week4")
download.file("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2FProgAssignment3-data.zip", "./ProgrammingAssignment3/hospital_data.zip", method="curl")
ls("./ProgrammingAssignment3")
list.files("./ProgrammingAssignment3/")
?unz
install_course_github("dgrtwo", "RData", branch="quizzes", multi=TRUE)
swirl()
ls()
